/* Diego */
package Interfaces.Administrador;

import Databases.Conexion;
import Logica.Medicos_Controller;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

public class MedicoUI extends javax.swing.JFrame {

    private final DefaultTableModel modeloTabla;
    private final List<Medicos_Controller> medicos;
    private int filaSeleccionada = -1;
    private Medicos_Controller medicoSeleccionado = null;
    private int dniSeleccionado = -1;

    public MedicoUI() {
        initComponents();
        txt_dni_medico.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                actualizarComentarioAdmin();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                actualizarComentarioAdmin();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                actualizarComentarioAdmin();
            }
        });

        medicos = new ArrayList<>();

        modeloTabla = new DefaultTableModel(
                new String[]{"DNI", "Nombres", "Apellidos", "Especialidad", "Comentario Admin"},
                0 // Inicialmente sin datos
        );

        tabla_medico.setModel(modeloTabla);

        tabla_medico.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                filaSeleccionada = tabla_medico.getSelectedRow();
                if (filaSeleccionada >= 0) {
                    medicoSeleccionado = medicos.get(filaSeleccionada);
                    dniSeleccionado = medicoSeleccionado.getDni_medico();
                    llenarFormulario(medicoSeleccionado);
                } else {
                    medicoSeleccionado = null;
                    dniSeleccionado = -1;
                }
            }
        });

        cargarDatosDesdeBaseDeDatos();
        actualizarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnRegistrar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        txt_dni_medico = new javax.swing.JTextField();
        txt_nombres_medico = new javax.swing.JTextField();
        txt_apellidos_medico = new javax.swing.JTextField();
        combobox_especialidad_medico = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        comentarios_admin_del_medico = new javax.swing.JTextArea();
        btnLimpiar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_medico = new javax.swing.JTable();
        btnVolver = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));

        btnRegistrar.setBackground(new java.awt.Color(102, 102, 102));
        btnRegistrar.setForeground(new java.awt.Color(255, 255, 255));
        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        btnEditar.setBackground(new java.awt.Color(102, 102, 102));
        btnEditar.setForeground(new java.awt.Color(255, 255, 255));
        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnEliminar.setBackground(new java.awt.Color(102, 102, 102));
        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnBuscar.setBackground(new java.awt.Color(102, 102, 102));
        btnBuscar.setForeground(new java.awt.Color(255, 255, 255));
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        combobox_especialidad_medico.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Medicina General", "Pediatria", "Cardiologia", "Neumologia", "Gastroenterologia", "Oftalmologia" }));
        combobox_especialidad_medico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combobox_especialidad_medicoActionPerformed(evt);
            }
        });

        comentarios_admin_del_medico.setColumns(20);
        comentarios_admin_del_medico.setRows(5);
        jScrollPane2.setViewportView(comentarios_admin_del_medico);

        btnLimpiar.setBackground(new java.awt.Color(102, 102, 102));
        btnLimpiar.setForeground(new java.awt.Color(255, 255, 255));
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        tabla_medico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabla_medico);

        btnVolver.setBackground(new java.awt.Color(102, 102, 102));
        btnVolver.setForeground(new java.awt.Color(255, 255, 255));
        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        jLabel2.setText("DNI:");

        jLabel3.setText("Nombres:");

        jLabel4.setText("Apellidos:");

        jLabel5.setText("Especialidad:");

        jLabel7.setText("Comentarios del Administrador:");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 28)); // NOI18N
        jLabel1.setText("Creación de Médico");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnLimpiar))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnVolver))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnRegistrar)
                                        .addGap(26, 26, 26)
                                        .addComponent(btnEditar))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18)
                                        .addComponent(combobox_especialidad_medico, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txt_nombres_medico, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(63, 63, 63)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnEliminar, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(txt_dni_medico, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txt_apellidos_medico, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnBuscar))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 758, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(btnVolver))
                        .addGap(46, 46, 46)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRegistrar)
                            .addComponent(btnEditar)
                            .addComponent(btnEliminar)
                            .addComponent(btnBuscar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txt_dni_medico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(txt_nombres_medico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(txt_apellidos_medico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(combobox_especialidad_medico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(48, 48, 48)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                        .addComponent(btnLimpiar)
                        .addGap(45, 45, 45))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cargarDatosDesdeBaseDeDatos() {
        try (Connection conexion = Conexion.obtenerConexion()) {
            String query = "SELECT * FROM medicos";
            try (PreparedStatement pstmt = conexion.prepareStatement(query);
                    ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    Medicos_Controller medico = new Medicos_Controller();
                    medico.setDni_medico(rs.getInt("dni_medico"));
                    medico.setNombre_medico(rs.getString("nombre_medico"));
                    medico.setApellido_medico(rs.getString("apellido_medico"));
                    medico.setEspecialidad_medico(rs.getString("especialidad_medico"));
                    medico.setComentario_admin_de_medico(rs.getString("comentario_admin_de_medico"));

                    medicos.add(medico);
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar los datos desde la base de datos: " + ex.getMessage());
        }
    }
    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        // TODO add your handling code here:
        if (camposCompletos()) {
            try {
                int dni = Integer.parseInt(txt_dni_medico.getText());
                String nombres = txt_nombres_medico.getText();
                String apellidos = txt_apellidos_medico.getText();
                String especialidad = combobox_especialidad_medico.getSelectedItem().toString();
                String comentarioAdmin = comentarios_admin_del_medico.getText();

                Medicos_Controller medico = new Medicos_Controller();
                medico.setDni_medico(dni);
                medico.setNombre_medico(nombres);
                medico.setApellido_medico(apellidos);
                medico.setEspecialidad_medico(especialidad);
                medico.setComentario_admin_de_medico(comentarioAdmin);

                try (Connection conexion = Conexion.obtenerConexion()) {
                    String query = "INSERT INTO medicos (dni_medico, nombre_medico, apellido_medico, especialidad_medico, comentario_admin_de_medico) VALUES (?, ?, ?, ?, ?)";
                    try (PreparedStatement pstmt = conexion.prepareStatement(query)) {
                        pstmt.setInt(1, medico.getDni_medico());
                        pstmt.setString(2, medico.getNombre_medico());
                        pstmt.setString(3, medico.getApellido_medico());
                        pstmt.setString(4, medico.getEspecialidad_medico());
                        pstmt.setString(5, medico.getComentario_admin_de_medico());
                        pstmt.executeUpdate();
                    }
                }

                JOptionPane.showMessageDialog(this, "Médico registrado exitosamente.");

                limpiarCampos();
                medicos.add(medico);
                actualizarTabla();

            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Asegúrate de ingresar números válidos en los campos de número.", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error al registrar el médico: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Todos los campos son requeridos. Por favor, completa todos los datos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRegistrarActionPerformed
    private boolean camposCompletos() {
        return !txt_dni_medico.getText().isEmpty()
                && !txt_nombres_medico.getText().isEmpty()
                && !txt_apellidos_medico.getText().isEmpty()
                && combobox_especialidad_medico.getSelectedItem() != null
                && !comentarios_admin_del_medico.getText().isEmpty();
    }
    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        if (filaSeleccionada >= 0 && medicoSeleccionado != null) {
            int opcion = JOptionPane.showConfirmDialog(this, "¿Quieres guardar estos cambios?", "Confirmar edición", JOptionPane.YES_NO_OPTION);
            if (opcion == JOptionPane.YES_OPTION) {
                medicoSeleccionado.setDni_medico(Integer.parseInt(txt_dni_medico.getText()));
                medicoSeleccionado.setNombre_medico(txt_nombres_medico.getText());
                medicoSeleccionado.setApellido_medico(txt_apellidos_medico.getText());
                medicoSeleccionado.setEspecialidad_medico(combobox_especialidad_medico.getSelectedItem().toString());
                medicoSeleccionado.setComentario_admin_de_medico(comentarios_admin_del_medico.getText());

                try (Connection conexion = Conexion.obtenerConexion()) {
                    String query = "UPDATE medicos SET dni_medico=?, nombre_medico=?, apellido_medico=?, especialidad_medico=?, comentario_admin_de_medico=? WHERE dni_medico=?";
                    try (PreparedStatement pstmt = conexion.prepareStatement(query)) {
                        pstmt.setInt(1, medicoSeleccionado.getDni_medico());
                        pstmt.setString(2, medicoSeleccionado.getNombre_medico());
                        pstmt.setString(3, medicoSeleccionado.getApellido_medico());
                        pstmt.setString(4, medicoSeleccionado.getEspecialidad_medico());
                        pstmt.setString(5, medicoSeleccionado.getComentario_admin_de_medico());
                        pstmt.setInt(6, dniSeleccionado);
                        pstmt.executeUpdate();
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error al editar el médico: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }

                JOptionPane.showMessageDialog(this, "Médico actualizado exitosamente.");

                limpiarCampos();
                actualizarTabla();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona un médico de la tabla para editar.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        if (filaSeleccionada >= 0 && medicoSeleccionado != null) {
            int opcion = JOptionPane.showConfirmDialog(this, "¿Estás seguro de que deseas eliminar este médico?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
            if (opcion == JOptionPane.YES_OPTION) {
                try (Connection conexion = Conexion.obtenerConexion()) {
                    String query = "DELETE FROM medicos WHERE dni_medico=?";
                    try (PreparedStatement pstmt = conexion.prepareStatement(query)) {
                        pstmt.setInt(1, dniSeleccionado);
                        pstmt.executeUpdate();
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error al eliminar el médico: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }

                JOptionPane.showMessageDialog(this, "Médico eliminado exitosamente.");

                limpiarCampos();
                medicos.remove(filaSeleccionada);
                actualizarTabla();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona un médico de la tabla para eliminar.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        String dniStr = JOptionPane.showInputDialog(this, "Ingresa el DNI del medico a buscar:", "Busqueda por DNI", JOptionPane.PLAIN_MESSAGE);

        if (dniStr != null && !dniStr.isEmpty()) {
            try {
                int dniBuscado = Integer.parseInt(dniStr);
                boolean encontrado = false;
                for (int i = 0; i < medicos.size(); i++) {
                    if (medicos.get(i).getDni_medico() == dniBuscado) {
                        encontrado = true;
                        tabla_medico.setRowSelectionInterval(i, i);
                        break;
                    }
                }
                if (!encontrado) {
                    JOptionPane.showMessageDialog(this, "No se encontró ningún médico con el DNI especificado.", "No encontrado", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Ingresa un número de DNI válido.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void combobox_especialidad_medicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combobox_especialidad_medicoActionPerformed
    }//GEN-LAST:event_combobox_especialidad_medicoActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiarCampos();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void actualizarTabla() {
        modeloTabla.setRowCount(0);
        for (Medicos_Controller medico : medicos) {
            modeloTabla.addRow(new Object[]{
                medico.getDni_medico(),
                medico.getNombre_medico(),
                medico.getApellido_medico(),
                medico.getEspecialidad_medico(),
                medico.getComentario_admin_de_medico()
            });
        }
    }

    private void limpiarCampos() {
        txt_dni_medico.setText("");
        txt_nombres_medico.setText("");
        txt_apellidos_medico.setText("");
        combobox_especialidad_medico.setSelectedIndex(0);
        comentarios_admin_del_medico.setText("");
        tabla_medico.clearSelection();
        filaSeleccionada = -1;
        medicoSeleccionado = null;
        dniSeleccionado = -1;
    }

    private void llenarFormulario(Medicos_Controller medico) {
        txt_dni_medico.setText(String.valueOf(medico.getDni_medico()));
        txt_nombres_medico.setText(medico.getNombre_medico());
        txt_apellidos_medico.setText(medico.getApellido_medico());
        combobox_especialidad_medico.setSelectedItem(medico.getEspecialidad_medico());
        comentarios_admin_del_medico.setText(medico.getComentario_admin_de_medico());
    }

    private void actualizarComentarioAdmin() {
        String comentario = "";
        if (!txt_dni_medico.getText().isEmpty()) {
            comentario += "Comentario para " + txt_dni_medico.getText() + ": ";
        }
        comentarios_admin_del_medico.setText(comentario);
    }
    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        // TODO add your handling code here:
        PrincipalUI principal = new PrincipalUI();
        principal.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnVolverActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MedicoUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MedicoUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JButton btnVolver;
    private javax.swing.JComboBox<String> combobox_especialidad_medico;
    private javax.swing.JTextArea comentarios_admin_del_medico;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tabla_medico;
    private javax.swing.JTextField txt_apellidos_medico;
    private javax.swing.JTextField txt_dni_medico;
    private javax.swing.JTextField txt_nombres_medico;
    // End of variables declaration//GEN-END:variables
}
